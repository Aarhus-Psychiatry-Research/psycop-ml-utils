name: Test and release main

on:
  push:
    branches:
      - main 

jobs:
  test:
    runs-on: ${{ matrix.os }}

    strategy:
      matrix:
        os: [macos-latest, ubuntu-latest, windows-latest]
        python-version: [3.9]

    steps:
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}

      - name: Checkout repo
        uses: actions/checkout@v3

      ### Caching
      - name: Linux, Overwrite version number from pyproject.toml, so it doesn't invalidate cache
        id: remove-version-from-toml-macos
        if: matrix.os == 'ubuntu-latest'
        run: |
          sed -i "s/version = \".*\"/version = \"0.0.0\"/g" pyproject.toml
          cat pyproject.toml

      - name: Mac, Overwrite version number from pyproject.toml, so it doesn't invalidate cache
        id: remove-version-from-toml-ubuntu
        if: matrix.os == 'macos-latest'
        run: |
          sed -i '' "s/version = \".*\"/version = \"0.0.0\"/g" pyproject.toml
          cat pyproject.toml

      - name: Load cached venv
        id: cached-poetry-dependencies
        uses: actions/cache@v2.1.6
        with:
          path: |
            .venv
            poetry.lock
          # Cache the complete venv dir for a given os, python version, pyproject.toml
          key: venv-${{ runner.os }}-python-${{ matrix.python-version }}-${{ hashFiles('pyproject.toml') }}-${{ hashFiles('.github/workflows/cache_version') }}

      - name: Mac, Linux, Load cached .local (Poetry install location)
        id: cached-poetry
        if: (matrix.os == 'ubuntu-latest' || matrix.os == 'macos-latest')
        uses: actions/cache@v2.1.6
        with:
          path: |
            ~/.local/
          # Cache the complete venv dir for a given os, python version, pyproject.toml
          key: venv-${{ runner.os }}-python-${{ matrix.python-version }}-${{ hashFiles('pyproject.toml') }}-${{ hashFiles('.github/workflows/cache_version') }}--${{ hashFiles('.github/workflows/main_test_and_release.yml') }}

      ### Installing
      - name: Install Poetry
        uses: snok/install-poetry@v1
        with:
          version: 1.1.15
          virtualenvs-create: true
          virtualenvs-in-project: true

      - name: Install Project
        if: steps.cached-poetry-dependencies.outputs.cache-hit != 'true'
        run: poetry install -vvv
      
      ### Run tests
      - name: Run pytest
        run: |
          poetry run pytest --cov=src --cov-report term-missing --color=yes


  release:
    runs-on: ubuntu-latest
    concurrency: release
    needs: test

    steps:
    # Checkout action is required for token to persist
    - uses: actions/checkout@v2
      with:
        fetch-depth: 0
        token: ${{ secrets.RELEASE_BOT }}

    - name: Python Semantic Release
      uses: relekang/python-semantic-release@v7.32.0
      with: 
        github_token: ${{ secrets.RELEASE_BOT }}
        # Remember to copy the tool.semantic_release section from pyproject.toml 
        # as well
        # To enable pypi, 
        # 1) Set upload_to_pypi to true in pyproject.toml and
        # 2) Set the pypi_token in the repo
        # 3) Uncomment the two lines below
        # repository_username: __token__
        # repository_password: ${{ secrets.PYPI_TOKEN }}