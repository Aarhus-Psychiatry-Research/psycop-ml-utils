name: CI Pytest
on:
  push:
    branches: [ main, dev ]
  pull_request:
    branches: [ main, dev ]

concurrency:
  # New commit on branch cancels running workflows of the same branch
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  pytest:
    runs-on: ubuntu-latest
    steps:
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'

    - name: Checkout repo
      uses: actions/checkout@v3

    ### Caching
    - name: Overwrite version number from pyproject.toml, so it doesn't invalidate cache
      id: remove-version-from-toml
      run: |
        sed -i "s/version = \".*\"/version = \"0.0.0\"/g" pyproject.toml
        cat pyproject.toml
        
    - name: Install Poetry
      uses: snok/install-poetry@v1
      with:
        version: 1.1.15
        virtualenvs-create: true
        virtualenvs-in-project: true

    - name: Load cached venv
      id: cached-poetry-dependencies
      uses: actions/cache@v2.1.6
      with:
        path: |
          .venv
          poetry.lock
        # Cache the complete venv dir for a given os, python version, pyproject.toml
        key: venv-${{ runner.os }}-python-${{ matrix.python-version }}-${{ hashFiles('pyproject.toml') }}-${{ hashFiles('.github/workflows/cache_version') }}

    ### Installing
    - name: Install Project
      if: steps.cached-poetry-dependencies.outputs.cache-hit != 'true'
      run: poetry install
    
    ### Run tests
    - name: Parralelise pytest
      run: |
        echo -e "[pytest]\naddopts='-n 2'" > pytest.ini
        cat pytest.ini

    - name: Source .venv
      run: |
        source $VENV

    - name: Run and write pytest
      run: |
        set -o pipefail
        poetry run pytest --cov=src --cov-report term-missing --color=yes | tee pytest-coverage.txt
